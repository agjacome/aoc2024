namespace day01

parseLine : Text -> (Nat, Nat)
parseLine = Text.words >> List.filterMap Nat.fromText >> cases
  [left, right] -> (left, right)
  _             -> bug "invalid input"

parseInput : Text -> ([Nat], [Nat])
parseInput = Text.lines >> List.map parseLine >> List.unzip

part1.solve : Text -> Text
part1.solve =
  parseInput
    >> Tuple.bimap List.sort
    >> Function.uncurry (List.zipWith Nat.diff)
    >> Nat.sum
    >> Nat.toText

part1.print : '{IO, Exception} ()
part1.print = do printSolution (Day 1) part1.solve

part1.submit : '{IO, Exception} ()
part1.submit = do submitSolution (Day 1) (Part 1) part1.solve

part2.solve : Text -> Text
part2.solve =
  parseInput
    >> Tuple.second NatBag.fromList
    >> cases (lefts, rightFreqs) -> List.map (left -> (NatBag.count left rightFreqs) * left) lefts
    >> Nat.sum
    >> Nat.toText

part2.print : '{IO, Exception} ()
part2.print = do printSolution (Day 1) part2.solve

part2.submit : '{IO, Exception} ()
part2.submit = do submitSolution (Day 1) (Part 2) day01.part2.solve

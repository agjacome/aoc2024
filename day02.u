namespace day02

currentDay : Day
currentDay = Day 2

parseLine : Text -> [Int]
parseLine = Text.words >> List.filterMap Int.fromText

parseInput : Text -> [[Int]]
parseInput = Text.lines >> List.map parseLine

safeLevels : [Int] -> Boolean
safeLevels levels =
  differences = List.slidingPairs levels |> List.map (cases (x, y) -> x - y)
  allIncreasing = List.all (d -> d >= +1 && d <= +3) differences
  allDecreasing = List.all (d -> d <= -1 && d >= -3) differences
  allIncreasing || allDecreasing

removeSingleLevel : [Int] -> [[Int]]
removeSingleLevel levels = List.mapIndexed (index _ -> List.deleteAt index levels) levels

part1.solve : Text -> Text
part1.solve =
  parseInput
    >> List.count safeLevels
    >> Nat.toText

part1.print : '{IO, Exception} ()
part1.print = do printSolution currentDay part1.solve

part1.submit : '{IO, Exception} ()
part1.submit = do submitSolution currentDay (Part 1) part1.solve

part2.solve : Text -> Text
part2.solve =
  parseInput
    >> List.count (levels -> safeLevels levels || (removeSingleLevel levels |> List.any safeLevels))
    >> Nat.toText

part2.print : '{IO, Exception} ()
part2.print = do printSolution currentDay part2.solve

part2.submit : '{IO, Exception} ()
part2.submit = do submitSolution currentDay (Part 2) part2.solve

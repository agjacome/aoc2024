namespace day03

currentDay : Day
currentDay = Day 3

type Instruction = Multiply Nat Nat | Do | Dont

Instruction.Multiply.fromTexts : Text -> Text -> Instruction
Instruction.Multiply.fromTexts a b =
  Multiply
    (Nat.fromText a |> Optional.getOrBug "invalid input")
    (Nat.fromText b |> Optional.getOrBug "invalid input")

Instruction.pattern : Pattern Text
Instruction.pattern =
  mulPattern =
    Pattern.join
      [ Text.patterns.literal "mul("
      , Pattern.capture (Pattern.some Text.patterns.digit)
      , Text.patterns.literal ","
      , Pattern.capture (Pattern.some Text.patterns.digit)
      , Text.patterns.literal ")"
      ]
  doPattern = Pattern.capture (Text.patterns.literal "do()")
  dontPattern = Pattern.capture (Text.patterns.literal "don't()")

  Pattern.oneOf (mulPattern +| [doPattern, dontPattern])

Instruction.parse : Text -> [Instruction]
Instruction.parse =
  loop : [Instruction] -> Text -> [Instruction]
  loop accumulator input =
    if Text.size input == 0 then
      accumulator
    else
      Pattern.run Instruction.pattern input |> cases
        None                    -> loop accumulator (Text.drop 1 input)
        Some(["do()"], rest)    -> loop (accumulator :+ Do) rest
        Some(["don't()"], rest) -> loop (accumulator :+ Dont) rest
        Some([a, b], rest)      -> loop (accumulator :+ (Instruction.Multiply.fromTexts a b)) rest
        _                       -> bug "invalid input"

  loop []

Instruction.run : [Instruction] -> [Nat]
Instruction.run =
  loop : [Nat] -> Boolean -> [Instruction] -> [Nat]
  loop acc isEnabled = cases
    []                   -> acc
    Do +: next           -> loop acc true next
    Dont +: next         -> loop acc false next
    Multiply a b +: next -> loop (acc ++ (if isEnabled then [a * b] else [])) isEnabled next

  loop [] true

part1.solve : Text -> Text
part1.solve =
  isMultiply : Instruction -> Boolean
  isMultiply = cases
    Multiply _ _ -> true
    _            -> false

  Instruction.parse >> List.filter isMultiply >> Instruction.run >> Nat.sum >> Nat.toText

part1.print : '{IO, Exception} ()
part1.print = do printSolution currentDay part1.solve

part1.submit : '{IO, Exception} ()
part1.submit = do submitSolution currentDay (Part 2) part1.solve

part2.solve : Text -> Text
part2.solve = Instruction.parse >> Instruction.run >> Nat.sum >> Nat.toText

part2.print : '{IO, Exception} ()
part2.print = do printSolution currentDay part2.solve

part2.submit : '{IO, Exception} ()
part2.submit = do submitSolution currentDay (Part 2) part2.solve
